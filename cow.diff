diff --git a/kernel/defs.h b/kernel/defs.h
index 3564db4..7f4f506 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -63,6 +63,8 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+void            incref(void *);
+int             cowhanlder (pagetable_t, uint64);
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -170,6 +172,7 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+pte_t *         walk(pagetable_t, uint64, int);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index fa6a0ac..5d6da8e 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -21,12 +21,17 @@ struct run {
 struct {
   struct spinlock lock;
   struct run *freelist;
+  /*
+  size of page statue is PHYSTOP / PGSIZE not (PHYSTOP-KERBASE)/PGSIZE
+  */
+  int pagestatus[(PHYSTOP-KERNBASE)/PGSIZE];
 } kmem;
 
 void
 kinit()
 {
   initlock(&kmem.lock, "kmem");
+  memset(kmem.pagestatus, 0, sizeof(kmem.pagestatus));
   freerange(end, (void*)PHYSTOP);
 }
 
@@ -52,14 +57,23 @@ kfree(void *pa)
     panic("kfree");
 
   // Fill with junk to catch dangling refs.
-  memset(pa, 1, PGSIZE);
-
-  r = (struct run*)pa;
-
   acquire(&kmem.lock);
-  r->next = kmem.freelist;
-  kmem.freelist = r;
+  if (--kmem.pagestatus[PAGE_INDEX((uint64)pa)] <= 0) {
+    // printf("curr ref of %d: %d\n", PAGE_INDEX((uint64)pa), kmem.pagestatus[PAGE_INDEX((uint64)pa)]);
+    memset(pa, 1, PGSIZE);
+    r = (struct run*)pa;
+    r->next = kmem.freelist;
+    kmem.freelist = r;
+  }
   release(&kmem.lock);
+  // memset(pa, 1, PGSIZE);
+
+  // r = (struct run*)pa;
+
+  // acquire(&kmem.lock);
+  // r->next = kmem.freelist;
+  // kmem.freelist = r;
+  // release(&kmem.lock);
 }
 
 // Allocate one 4096-byte page of physical memory.
@@ -72,11 +86,56 @@ kalloc(void)
 
   acquire(&kmem.lock);
   r = kmem.freelist;
-  if(r)
+  if(r) {
+    kmem.pagestatus[PAGE_INDEX((uint64)r)] = 1;
     kmem.freelist = r->next;
+  }
   release(&kmem.lock);
 
   if(r)
     memset((char*)r, 5, PGSIZE); // fill with junk
   return (void*)r;
 }
+
+void
+incref (void* pa)
+{
+  acquire(&kmem.lock);
+  kmem.pagestatus[PAGE_INDEX((uint64)pa)] += 1;
+  release(&kmem.lock);
+}
+
+int
+cowhanlder (pagetable_t pagetable, uint64 va)
+{
+  pte_t *pte;
+  uint flags;
+  uint64 pa;
+  if (!pagetable || va > MAXVA) return -1;
+  pte = walk(pagetable, va, 0);
+  /*
+  we only track User or Valid page here
+  */
+  if (!pte || !(*pte & PTE_U) || !(*pte & PTE_V))
+    return -1;
+  pa = PTE2PA(*pte);
+  acquire(&kmem.lock);
+  if (kmem.pagestatus[PAGE_INDEX((uint64)pa)] == 1) {
+    *pte &= ~PTE_C;
+    *pte |= PTE_W;
+    release(&kmem.lock);
+    return 0;
+  }
+  release(&kmem.lock);
+  char* mem;
+  flags = PTE_FLAGS(*pte);
+  if((mem = kalloc()) == 0) {
+    printf ("out of mem\n");
+    return -1;
+  }
+  memmove(mem, (char*)pa, PGSIZE);
+  kfree ((char*)pa);
+  *pte = PA2PTE(mem) | flags | PTE_W;
+  *pte &= ~PTE_C;
+  return 0;
+}
\ No newline at end of file
diff --git a/kernel/proc.c b/kernel/proc.c
index 22e7ce4..0da4af9 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -155,6 +155,8 @@ freeproc(struct proc *p)
   p->trapframe = 0;
   if(p->pagetable)
     proc_freepagetable(p->pagetable, p->sz);
+
+  // only free when it is not used by any process
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
@@ -281,6 +283,7 @@ fork(void)
     return -1;
   }
 
+  // printf ("copy page table from %s...\n", p->name);
   // Copy user memory from parent to child.
   if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
     freeproc(np);
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 1691faf..483b35a 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -343,6 +343,8 @@ sfence_vma()
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // 1 -> user can access
+#define PTE_C (1L << 8) // COW flag
+#define PAGE_INDEX(pg) (((pg)-KERNBASE) >> 12)
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/trap.c b/kernel/trap.c
index a63249e..3c78d24 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -67,6 +67,17 @@ usertrap(void)
     syscall();
   } else if((which_dev = devintr()) != 0){
     // ok
+  } else if (r_scause() == 13 || r_scause() == 15) {
+    uint64 va = r_stval();
+    if(va >= MAXVA) {
+      p->killed = 1;
+    } else if(va >= p->sz) {
+      p->killed = 1;
+    } else if(va < p->trapframe->sp && va >= PGROUNDDOWN(p->trapframe->sp) - PGSIZE) {
+      p->killed = 1;
+    } else if(cowhanlder(p->pagetable, va) != 0) {
+      p->killed = 1;
+    }
   } else {
     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
     printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
diff --git a/kernel/vm.c b/kernel/vm.c
index d5a12a0..967e01a 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -303,7 +303,6 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   pte_t *pte;
   uint64 pa, i;
   uint flags;
-  char *mem;
 
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
@@ -311,14 +310,12 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
     if((*pte & PTE_V) == 0)
       panic("uvmcopy: page not present");
     pa = PTE2PA(*pte);
-    flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
-      goto err;
-    memmove(mem, (char*)pa, PGSIZE);
-    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
-      kfree(mem);
+    flags = (PTE_FLAGS(*pte) | PTE_C) & (~PTE_W);
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){
       goto err;
     }
+    *pte = PA2PTE(pa) | flags;
+    incref ((char*)pa);
   }
   return 0;
 
@@ -350,6 +347,9 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
 
   while(len > 0){
     va0 = PGROUNDDOWN(dstva);
+    if (cowhanlder (pagetable, va0) != 0) {
+      return -1;
+    }
     pa0 = walkaddr(pagetable, va0);
     if(pa0 == 0)
       return -1;
diff --git a/user/sh.c b/user/sh.c
index 83dd513..c96dab0 100644
--- a/user/sh.c
+++ b/user/sh.c
@@ -54,6 +54,7 @@ void panic(char*);
 struct cmd *parsecmd(char*);
 
 // Execute cmd.  Never returns.
+__attribute__((noreturn))
 void
 runcmd(struct cmd *cmd)
 {
